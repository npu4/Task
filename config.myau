%scaner_name Scaner
%codes_type Lexem_code

%ident_name Ident

%token_fields
"unsigned __int128 int_val;
__float128 float_val;"

%class_members
"__int128 integer_part;
__int128 fractional_part;
size_t exponent;
ssize_t exp_sign;
size_t frac_part_num_digits;
bool is_float;
char32_t precision;
char32_t char_code;"

%codes 
String,               Char,                 Integer,     
Float32,              Float64,              Float80,     
Float128,             Kw_byte,              Kw_unsigned,       
Kw_uint8,             Kw_uint16,            Kw_uint32,
Kw_uint64,            Kw_uint128,           Kw_long,     
Kw_small,             Kw_read,              Kw_float,    
Kw_float32,           Kw_float64,                 
Kw_float128,          Kw_return,            Kw_endif,
Kw_print,             Kw_exit,     
Kw_for,               Kw_if,                    
Kw_value,             Kw_else,           
Kw_elif,              Kw_uses,              Kw_true,
Kw_const,             Kw_bool,              Kw_bool8,    
Kw_bool16,            Kw_bool32,            Kw_bool64,   
Kw_false,             Kw_array,             Kw_module,         
Kw_void,              Kw_var,
Kw_enum,              Kw_repeat,            Kw_while,    
Kw_as_long_as,        Kw_export,            Kw_case,   
Kw_continue,          Kw_match,             Kw_char,           
Kw_char8,             Kw_char16,            Kw_char32,
Kw_ref,               Kw_string,            Kw_string8,  
Kw_string16,          Kw_string32,          Kw_struct,   
Kw_type,              Kw_then,                     
Kw_function,          Kw_int,               Kw_int8,
Kw_int16,             Kw_int32,             Kw_int64,    
Kw_int128,            
Comma,                  Semicolon,             
Colon,                  Dot,                
Open_round_bracket,     Closed_round_bracket,
Open_square_bracket,    Closed_square_bracket, 
Equal_sign,             At_sign,             
Tuple_begin,            Tuple_end,
Variant_delimiter,      Conditional_op,        
Logical_or,             Logical_or_not,      
Logical_xor,            Logical_xor_not,
Logical_and,            Logical_and_not,
Logical_not,            Less_than,
Greater_than,           Lower_or_equals,
Greater_or_equals,      Not_equals,
Bitwise_xor,            Bitwise_or,
Bitwise_xor_not,        Bitwise_or_not,
Open_curly_bracket,     Closed_curly_bracket,
Bitwise_and,            Bitwise_and_not,
Left_shift,             Right_shift,
Signed_right_shift,     Bitwise_not,
Plus,                   Minus,
Mul,                    Div,
Fdiv,                   Mod,
Power,                  Fpower,
Sizeof,                 Dimension_size,
Allocated_array_open,   Allocated_array_close,
 Module_name_prefix,    Scope_resolution,
Assign_to_field,        Label_prefix,
Label_suffix,           Assign,
Pattern_is,             Br_dots

%idents {[:Letter:]|[:letter:]|_}{[:Letter:]|[:letter:]|_|[:digits:]}

%keywords 
"byte"       : Kw_byte,       
"uint"         : Kw_unsigned,
"uint_128"   : Kw_uint128,    
"uint_16"       : Kw_uint16,
"uint_32"    : Kw_uint32,     
"uint_64"       : Kw_uint64,
"uint_8"     : Kw_uint8,      
"long"       : Kw_long,
"read"       : Kw_read,       
"float"           : Kw_float,
"float_128"     : Kw_float128,   
"float_32"         : Kw_float32,
"float_64"      : Kw_float64,
"return"    : Kw_return,     
"endif"           : Kw_endif,
"print"      : Kw_print,
"break"      : Kw_exit,       
"for"           : Kw_for,
"if"       : Kw_if,
"val"   : Kw_value, 
"else"      : Kw_else,       
"elif"          : Kw_elif,
"import" : Kw_uses,       
"true"        : Kw_true,
"const"      : Kw_const,      
"bool"           : Kw_bool,
"bool_16"      : Kw_bool16,     
"bool_32"         : Kw_bool32,
"bool_64"      : Kw_bool64,     
"bool_8"          : Kw_bool8,
"false"       : Kw_false,      
"short"     : Kw_small,
"array"     : Kw_array,      
"module"        : Kw_module,
"void"      : Kw_void,
"var"      : Kw_var,        
"enum"  : Kw_enum,
"repeat"   : Kw_repeat,     
"while"          : Kw_while,
"until"     : Kw_as_long_as, 
"export" : Kw_export,      
"case" : Kw_case,
"continue"      : Kw_continue,
"match"     : Kw_match,      
"char"          : Kw_char,
"char_16"     : Kw_char16,     
"char_32"        : Kw_char32,
"char_8"      : Kw_char8,      
"ref"        : Kw_ref,
"string"     : Kw_string,     
"string_16"      : Kw_string16,
"string_32"   : Kw_string32,   
"string_8"       : Kw_string8,
"struct"  : Kw_struct,     
"type"           : Kw_type,
"then"         : Kw_then,
"fn"    : Kw_function,   
"int"           : Kw_int,
"int_8"       : Kw_int8,       
"int_16"         : Kw_int16,
"int_32"      : Kw_int32,      
"int_64"         : Kw_int64,
"int_128"     : Kw_int128

%delimiters
","     : Comma,                ";"     : Semicolon,             
":"     : Colon,                "."     : Dot,                
"("     : Open_round_bracket,   ")"     : Closed_round_bracket,
"["     : Open_square_bracket,  "]"     : Closed_square_bracket, 
"="     : Equal_sign,           "@"     : At_sign,             
"(:"    : Tuple_begin,          ":)"    : Tuple_end,
".|."   : Variant_delimiter,    "?"     : Conditional_op,        
"||"    : Logical_or,           "!||"   : Logical_or_not,      
"^^"    : Logical_xor,          "!^^"   : Logical_xor_not,
"&&"    : Logical_and,          "!&&"   : Logical_and_not,
"!"     : Logical_not,          "<"     : Less_than,
">"     : Greater_than,         "<="    : Lower_or_equals,
">="    : Greater_or_equals,    "!="    : Not_equals,
"^"     : Bitwise_xor,          "|"     : Bitwise_or,
"~^"    : Bitwise_xor_not,      "~|"    : Bitwise_or_not,
"{"     : Open_curly_bracket,   "}"     : Closed_curly_bracket,
"&"     : Bitwise_and,          "~&"    : Bitwise_and_not,
"<<"    : Left_shift,           ">>"    : Right_shift,
">>>"   : Signed_right_shift,   "~"     : Bitwise_not,
"+"     : Plus,                 "-"     : Minus,
"*"     : Mul,                  "/"     : Div,
"/."    : Fdiv,                 "%"     : Mod,
"**"    : Power,                "**."   : Fpower,
"#"     : Sizeof,               "##"    : Dimension_size,
"[:"    : Allocated_array_open, ":]"    : Allocated_array_close,
"|:"    : Module_name_prefix,   "::"    : Scope_resolution,
"<-"    : Assign_to_field,      "<:"    : Label_prefix,
":>"    : Label_suffix,         ":="    : Assign,
"->"    : Pattern_is,
"{..}"  : Br_dots

%impl_additions "
  #include <quadmath>

  size_t digit2int(char32_t ch) {
    size_t v = ch - U'0';
    return (v<=9)? v : (v&0b1101'1111) - 7;
  }
  __int128 setexp(char32_t ch) {
    return (ch == '-')? -1 : 1;
  }

  __float128 Scaner::build_float(){
    return integer_part + fractional_part*powq(10,-frac_part_num_digits)+exp_sign*exponent;
  }

  Lexem_code precision2code(char32_t ch){
    switch (ch) {
      case U'S': case U's':
        return Float32;
        break;
      case U'D': case U'd':
        return Float64;
        break;
      case U'E': case U'e':
        return Float80;
        break;
      case U'Q': case U'q':
        return Float128;
        break;
      default:
        return Float32;
        break;
    }
  }
"


%strings "buffer.clear();":"token.code=(buffer.length()==1)?Char:String;"

%action write_by_code "buffer += char_code;"
%action add_dec_digit_to_char_code "char_code = char_code * 10 + digit2int(ch);"
%action add_oct_digit_to_char_code "char_code = char_code * 8 + digit2int(ch);"
%action add_bin_digit_to_char_code "char_code = char_code * 2 + digit2int(ch);"
%action add_hex_digit_to_char_code "char_code = char_code * 16 + digit2int(ch);"
{
(\$([:digits:]$add_dec_digit_to_char_code('?[:digits:]$add_dec_digit_to_char_code)*|
   0o[:odigits:]$add_oct_digit_to_char_code('?[:odigits:]$add_oct_digit_to_char_code)*|
0(b|B)[:bdigits:]$add_bin_digit_to_char_code('?[:bdigits:]$add_bin_digit_to_char_code)*|
0(x|X)[:xdigits:]$add_hex_digit_to_char_code('?[:xdigits:]$add_hex_digit_to_char_code)*)$write_by_code)*|
("([:ndq:]$write|""$write)*"(\$([:digits:]$add_dec_digit_to_char_code('?[:digits:]$add_dec_digit_to_char_code)*|
   0o[:odigits:]$add_oct_digit_to_char_code('?[:odigits:]$add_oct_digit_to_char_code)*|
0(b|B)[:bdigits:]$add_bin_digit_to_char_code('?[:bdigits:]$add_bin_digit_to_char_code)*|
0(x|X)[:xdigits:]$add_hex_digit_to_char_code('?[:xdigits:]$add_hex_digit_to_char_code)*)$write_by_code)+)*
} 

%numbers "int_val = 0;
          float_val = 0;
          is_float = false;
          integer_part = 0;
          fractional_part = 0;
          exponent = 1;
          exp_sign = 1;
          frac_part_num_digits = 0;
          token.code = Integer;"
          :
          "
          if(is_float){
            token.float_val=build_float();
            token.code = precision2code(precision);
          } else {
            token.int_val=integer_part;
            token.code = Integer;
          }"	
          %action addHexDigit "integer_part = (integer_part << 4) + digit2int(ch);"
          %action addDecDigit "integer_part = integer_part * 10 + digit2int(ch);"
          %action addBinDigit "integer_part = (integer_part << 1) + digit2int(ch);"
          %action addOctDigit "integer_part = (integer_part << 3) + digit2int(ch);"
          %action setIsFloat "is_float = true;"
          %action addDigitToDegree "exponent = exponent * 10 + digit2int(ch);"
          %action addDecToFrac "fractional_part = fractional_part / 10 + digit2int(ch); frac_part_num_digits += 1;"
          %action setExpSign "exp_sign = setexp(ch);"
          %action setPrecision "precision = ch; is_float = true;"
	                                
{[:digits:]$addDecDigit('?[:digits:]$addDecDigit)*(.$setIsFloat[:digits:]$addDecToFrac('?[:digits:]$addDecToFrac*))
?(((S|s)|(D|d)|(E|e)|(Q|q))$setPrecision(\+|-)$setExpSign?[:digits:]$addDigitToDegree('?[:digits:]$addDigitToDegree)*)?|
0o[:odigits:]$addOctDigit('?[:odigits:]$addOctDigit)*|
0(b|B)[:bdigits:]$addBinDigit('?[:bdigits:]$addBinDigit)*|
0(x|X)[:xdigits:]$addHexDigit('?[:xdigits:]$addHexDigit)*}
